#!/usr/bin/env groovy

PULL_REQ_ARTIFACTS = [
    "bin/terraform-provider-bcf*",
]

BUILD_ARTIFACTS = [
    "bin/terraform-provider-bcf*",
]

def setup() {
    checkoutInfrastructure()
}

def build(appDir="") {
    sh "echo 'Running Jenkins build()'"
    sh "./jenkins/pull_req.sh"
}

def archiveArtifacts() {
    def artifacts = BUILD_ARTIFACTS
    archiveArtifacts artifacts.join(', ')
}

// Post

def setResult() {
    // The result is sometimes not set during the pipeline (not stage) post
    if (!currentBuild.result) {
        currentBuild.result = currentBuild.currentResult
    }
    echo "Build result: ${currentBuild.result}"
}

def setGitHubContextStatus(String context) {
    step([
        $class: 'GitHubCommitStatusSetter',
        contextSource: [
            $class: 'ManuallyEnteredCommitContextSource',
            context: context],
        reposSource: [
            $class: 'ManuallyEnteredRepositorySource',
            url: 'git@github.com:bigswitch/bcf-terraform.git']])
}

def notifyThroughMailer() {
    step([
        $class: 'Mailer',
        notifyEveryUnstableBuild: true,
        recipients: [
            'sarath@bigswitch.com',
            'saadet.savas@bigswitch.com',
            ].join(' '),
        sendToIndividuals: true,
    ])
}

def checkoutInfrastructure() {
    dir('infrastructure') {
        git(
            credentialsId: 'ssh_jenkins_master',
            url: 'git@github.com:bigswitch/infrastructure.git'
        )
    }
}

def linkAndPostApplianceDownloadUrls(appDir="") {
    linkAndPostDownloadUrls PULL_REQ_ARTIFACTS.collect { appDir ? appDir + "/" + it : it }
}

def linkAndPostDownloadUrls(globs) {
    // doesn't work with globs that have spaces
    def snippets = ['''\
        #!/bin/bash
        set -e
        set -u
        set -x
        set -o pipefail
        shopt -s globstar
        '''.stripIndent()]
    for (glob in globs) {
        snippets << """\
            for path in ${glob}; do
                if [[ -e "\${path}" ]]; then
                    infrastructure/build/pull-req-tools/link-and-post-download-url.sh \\
                        "\$(readlink -f "\${path}")"
                fi
            done
            """.stripIndent()
    }
    withCredentials([
            string(
                credentialsId: 'github-auth-token-bsn-abat',
                variable: 'GITHUB_AUTH_TOKEN')
            ]) {
        sh snippets.join('\n')
    }
}

return this
